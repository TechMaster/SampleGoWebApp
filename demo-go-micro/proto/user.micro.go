// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/user.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	StatusResponse
	CreateUserRequest
	User
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Userservice service

type UserserviceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*StatusResponse, error)
}

type userserviceClient struct {
	c           client.Client
	serviceName string
}

func NewUserserviceClient(serviceName string, c client.Client) UserserviceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "proto"
	}
	return &userserviceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userserviceClient) Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Userservice.Hello", in)
	out := new(HelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Userservice.CreateUser", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Userservice service

type UserserviceHandler interface {
	Hello(context.Context, *HelloRequest, *HelloResponse) error
	CreateUser(context.Context, *CreateUserRequest, *StatusResponse) error
}

func RegisterUserserviceHandler(s server.Server, hdlr UserserviceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Userservice{hdlr}, opts...))
}

type Userservice struct {
	UserserviceHandler
}

func (h *Userservice) Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error {
	return h.UserserviceHandler.Hello(ctx, in, out)
}

func (h *Userservice) CreateUser(ctx context.Context, in *CreateUserRequest, out *StatusResponse) error {
	return h.UserserviceHandler.CreateUser(ctx, in, out)
}
